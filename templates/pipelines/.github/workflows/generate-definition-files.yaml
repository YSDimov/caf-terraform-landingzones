#
# Copyright (c) Microsoft Corporation
# Licensed under the MIT License.
#
# TODO not properly declared variables. Missing $
#            -e GITOPS_SERVER_URL=GITHUB_SERVER_URL/GITHUB_REPOSITORY \ -> on top these can be processed only as script env vars
#            -e RUNNER_NUMBERS= RUNNER_NUMBERS  \
#            -e AGENT_TOKEN= RUNNER_REGISTRATION_TOKEN  \
#
# TODO add extra var --extra-vars AZURE_OBJECT_ID=AZURE_OBJECT_ID \
#            --extra-vars AZURE_OBJECT_ID=AZURE_OBJECT_ID \
#            --extra-vars upn_owner=yordan.dimov@phicloudplatform.onmicrosoft.com \
#            --extra-vars tenant_name=phicloudplatform.onmicrosoft.com \
#            --extra-vars tenant_id=77d3fca4-653b-4cdf-b36f-d8ab89d3e517 \
#            --extra-vars subscription_id=849c1d97-dbae-4e1e-bf0a-c555411115d0 \
#            --extra-vars subscription_name="PHI-PLATFORM-PRD-MANAGEMENT" \
#fatal: [localhost]: FAILED! => {"changed": true, "cmd": "az ad signed-in-user show --query id -o tsv", "delta": "0:00:0***.***58852", "end": "2023-09-***3 09:04:3***.656002", "msg": "non-zero return code", "rc": ***, "start": "2023-09-***3 09:04:30.497***50", "stderr": "ERROR: /me request is only valid with delegated authentication flow.", "stderr_lines": ["ERROR: /me request is only valid with delegated authentication flow."], "stdout": "", "stdout_lines": []}
#
# TODO missing topology file 
# fatal: [localhost]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: 'topology_file' is undefined. 'topology_file' is undefined\n\nThe error appears to be in '/home/vscode/agent/_work/phiplatform-caf-terraform-landingzone/phiplatform-caf-terraform-landingzone/landingzones/templates/ansible/walk-through.yaml': line 74, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n- debug:\n  ^ here\n"}
# --extra-vars topology_file="$(pwd)/landingzones/templates/platform/caf_platform_prod_nonprod.yaml" \
#
# TODO gh: To use GitHub CLI in a GitHub Actions workflow, set the GH_TOKEN environment variable. Example: GH_TOKEN: ${{ github.token }} missing


name: "Generate definition files"

on:
  workflow_call:
    inputs:
      terraform_code_repository:
        description: "Git repository of the the terraform entry code."
        required: true
        type: string
      terraform_code_ref:
        description: "Tag or branch name."
        required: true
        type: string
      environment:
        description: Name of the CAF environment
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_LAUNCHPAD_SUBSCRIPTION_ID:
        required: true
      AZURE_MANAGEMENT_SUBSCRIPTION_ID:
        required: false
      AZURE_CONNECTIVITY_SUBSCRIPTION_ID:
        required: false
      AZURE_IDENTITY_SUBSCRIPTION_ID:
        required: false
      AZURE_SECURITY_SUBSCRIPTION_ID:
        required: false
      AZURE_TARGET_SUBSCRIPTION_ID:
        required: true
      RUNNER_REGISTRATION_TOKEN:
        required: true
      AZURE_OBJECT_ID:
        required: true
      ROVER_AGENT_DOCKER_IMAGE:
        required: true
      RUNNER_NUMBERS:
        required: true


env:
  TF_CLI_ARGS: '-no-color'
  TF_REGISTRY_DISCOVERY_RETRY: 5
  TF_REGISTRY_CLIENT_TIMEOUT: 15
  ROVER_RUNNER: true
  GH_TOKEN: ${{ github.token }}

{% raw %}
jobs:
  rover:
    name: Generate configuration files
    runs-on: [self-hosted, platform]
    
    steps:
      
      - name: Checkout Configuration
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_MANAGEMENT_SUBSCRIPTION_ID }}

      - name: Create defnition files
        run: |
          rm -rf ./landingzones
          git clone -b ${{ inputs.terraform_code_ref }} --single-branch ${{ inputs.terraform_code_repository }} ./landingzones
          
          cred_vault_name=$(az keyvault list --query "[?(tags.caf_identity_aad_key=='cred_level0' && tags.caf_environment=='${{ inputs.environment }}')].{name:name}[0]" -o tsv)
          if [ "${cred_vault_name}" != ''  ]; then
            sp_keyvault_url="https://${cred_vault_name}.vault.azure.net/"
            
            # Test permissions
            az keyvault secret show --id ${sp_keyvault_url}/secrets/sp-client-id --query 'value' -o tsv  --only-show-errors | read CLIENT_ID

            if [ ! -z "${tenant}" ]; then
                export ARM_TENANT_ID=${tenant}
            else
                export ARM_TENANT_ID=$(az keyvault secret show --id ${sp_keyvault_url}/secrets/sp-tenant-id --query 'value' -o tsv --only-show-errors)
            fi

            export ARM_CLIENT_ID=$(az keyvault secret show --id ${sp_keyvault_url}/secrets/sp-client-id --query 'value' -o tsv --only-show-errors)
            export ARM_CLIENT_SECRET=$(az keyvault secret show --id ${sp_keyvault_url}/secrets/sp-client-secret --query 'value' -o tsv --only-show-errors)

            az login --service-principal -u ${ARM_CLIENT_ID} -p ${ARM_CLIENT_SECRET} -t ${ARM_TENANT_ID}  --only-show-errors 1> /dev/null
          fi

          ansible-playbook $(readlink -f ./landingzones/templates/ansible/walk-through-bootstrap.yaml) \
            --extra-vars "@$(readlink -f ./platform/definition/ignite.yaml)" \
            --extra-vars AZURE_OBJECT_ID=${{secrets.AZURE_OBJECT_ID}} \
            --extra-vars upn_owner=yordan.dimov@phicloudplatform.onmicrosoft.com \
            --extra-vars tenant_name=phicloudplatform.onmicrosoft.com \
            --extra-vars tenant_id=77d3fca4-653b-4cdf-b36f-d8ab89d3e517 \
            --extra-vars subscription_id=849c1d97-dbae-4e1e-bf0a-c555411115d0 \
            --extra-vars subscription_name="PHI-PLATFORM-PRD-MANAGEMENT" \
            --extra-vars topology_file="$(pwd)/landingzones/templates/platform/caf_platform_prod_nonprod.yaml" \
            -e base_folder=$(pwd) \
            -e GITOPS_SERVER_URL="${{github.server_url}}/${{github.repository}}" \
            -e RUNNER_NUMBERS=${{secrets.RUNNER_NUMBERS}} \
            -e AGENT_TOKEN=${{secrets.RUNNER_REGISTRATION_TOKEN}} \
            -e ROVER_AGENT_DOCKER_IMAGE=${{secrets.ROVER_AGENT_DOCKER_IMAGE}} \
            -e sub_management=${{secrets.AZURE_MANAGEMENT_SUBSCRIPTION_ID}} \
            -e sub_connectivity=${{secrets.AZURE_CONNECTIVITY_SUBSCRIPTION_ID}} \
            -e sub_identity=${{secrets.AZURE_IDENTITY_SUBSCRIPTION_ID}} \
            -e sub_security=${{secrets.AZURE_SECURITY_SUBSCRIPTION_ID}} \
            -e TF_VAR_environment=${{ inputs.environment }} \
            -e bootstrap_sp_object_id=${{secrets.AZURE_OBJECT_ID}} \
            -e template_folder="$(pwd)/platform/definition"


      - name: Generate PR for 
        run: |
          git config --global --add safe.directory $(pwd)
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions@github.com"

          git checkout -b end2end
          git add .
          pre-commit
          git commit -am "Update definition files."

          git remote -v

          echo ${GITHUB_HEAD_REF}
          
          if [ -z "$(git status --porcelain)" ];
          then
              echo "Nothing to commit"
          else
            git add --all .
            git commit -m "Update configuration files"
            git push
          fi
          
          /usr/bin/gh pr create \
            --assignee "@me" \
            --title "Complete the deployment of the platform services." \
            --body "${body}" \
            --base bootstrap \
            -R $(echo "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" || echo "git config --get remote.origin.url" | sed -e 's#^https://github.com/##; s#^git@github.com:##; s#.git$##') \
            --head end2end
          
          echo "TODO --head end2end added because of error: aborted: you must first push the current branch to a remote, or use the --head flag"

{% endraw %}
